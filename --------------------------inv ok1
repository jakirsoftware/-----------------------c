function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .addMetaTag('viewport', 'width=device-width, initial-scale=1')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

function getProducts() {
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Product');
  let products = sheet.getRange('A2:B').getValues().filter(String);  // Product Name and Price
  return products;
}

function getContacts() {
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Contact');
  let contacts = sheet.getRange('A2:A').getValues().filter(String);
  return contacts;
}

function saveInvoice(invoiceData) {
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Invoices');
  let invoiceInfo = invoiceData.invoiceInfo;
  let products = invoiceData.products;

  let lastRow = sheet.getLastRow() + 1;

  // Insert Invoice Data
  sheet.getRange(lastRow, 1).setValue(invoiceInfo.date);
  sheet.getRange(lastRow, 2).setValue(invoiceInfo.invoiceType);
  sheet.getRange(lastRow, 3).setValue(invoiceInfo.contact);
  sheet.getRange(lastRow, 4).setValue(invoiceInfo.invoiceNumber);
  sheet.getRange(lastRow, 5).setValue(invoiceInfo.description);

  // Insert Products Data
  let productStartCol = 6; // Column for products
  products.forEach((product, index) => {
    sheet.getRange(lastRow, productStartCol + index * 4).setValue(product.productName);
    sheet.getRange(lastRow, productStartCol + 1 + index * 4).setValue(product.price);
    sheet.getRange(lastRow, productStartCol + 2 + index * 4).setValue(product.quantity);
    sheet.getRange(lastRow, productStartCol + 3 + index * 4).setValue(product.total);
  });

  return 'Invoice Saved Successfully!';
}
-------------------------------------
<!DOCTYPE html>
<html>
<head>
  <title>Invoice System</title>
  <script>
    let selectedInvoiceType = "";

    window.onload = function() {
      document.getElementById("invoiceDate").value = new Date().toISOString().split('T')[0]; // Set default date to today's date

      // Fetch contacts from the 'Contact' sheet
      google.script.run.withSuccessHandler(function(contacts) {
        const contactSelect = document.getElementById("contact");
        contacts.forEach(contact => {
          let option = document.createElement("option");
          option.value = contact;
          option.textContent = contact;
          contactSelect.appendChild(option);
        });
      }).getContacts();

      // Fetch products from the 'Product' sheet
      google.script.run.withSuccessHandler(function(products) {
        const productSelect = document.querySelectorAll(".product-select");
        productSelect.forEach(select => {
          products.forEach(product => {
            let option = document.createElement("option");
            option.value = product[0];  // Product Name
            option.textContent = product[0];  // Product Name
            select.appendChild(option);
          });
        });
      }).getProducts();
    }

    function setInvoiceType(type) {
      selectedInvoiceType = type;
      document.getElementById("selectedType").innerText = type;
    }

    function calculateTotal() {
      let rows = document.querySelectorAll("#productTable tbody tr");
      let grandTotal = 0;

      rows.forEach(row => {
        let price = parseFloat(row.querySelector(".price").value) || 0;
        let quantity = parseFloat(row.querySelector(".quantity").value) || 0;
        let total = price * quantity;

        row.querySelector(".total").value = total.toFixed(2);
        grandTotal += total;
      });

      document.getElementById("grandTotal").innerText = "Grand Total: $" + grandTotal.toFixed(2);
    }

    function addProductRow() {
      let tableBody = document.querySelector("#productTable tbody");
      let newRow = document.createElement("tr");

      newRow.innerHTML = `
        <td><select class="product-select" onchange="updatePrice(this)">
          <option value="">Select Product</option>
        </select></td>
        <td><input type="number" class="price" placeholder="Price" readonly></td>
        <td><input type="number" class="quantity" placeholder="Quantity" oninput="calculateTotal()"></td>
        <td><input type="text" class="total" placeholder="Total" readonly></td>
        <td><button onclick="removeRow(this)">‚ùå</button></td>
      `;

      tableBody.appendChild(newRow);
    }

    function removeRow(button) {
      button.parentElement.parentElement.remove();
      calculateTotal();
    }

    function updatePrice(select) {
      let productName = select.value;
      let row = select.closest('tr');
      let priceInput = row.querySelector(".price");

      google.script.run.withSuccessHandler(function(products) {
        let product = products.find(p => p[0] === productName);
        if (product) {
          priceInput.value = product[1];  // Set the price in the price input field
        }
      }).getProducts();
      
      calculateTotal();
    }

    function saveInvoice() {
      if (!selectedInvoiceType) {
        alert("Please select an Invoice Type (Purchase or Sale).");
        return;
      }

      let invoiceInfo = {
        invoiceType: selectedInvoiceType,
        date: document.getElementById("invoiceDate").value,
        contact: document.getElementById("contact").value,
        invoiceNumber: document.getElementById("invoiceNumber").value,
        description: document.getElementById("description").value
      };

      let products = [];
      let rows = document.querySelectorAll("#productTable tbody tr");

      rows.forEach(row => {
        let productName = row.querySelector(".product-select").value;
        let price = parseFloat(row.querySelector(".price").value) || 0;
        let quantity = parseFloat(row.querySelector(".quantity").value) || 0;
        let total = parseFloat(row.querySelector(".total").value) || 0;

        if (productName && quantity > 0) {
          products.push({ productName, price, quantity, total });
        }
      });

      if (!invoiceInfo.date || !invoiceInfo.invoiceNumber || products.length === 0) {
        alert("Please fill invoice details and add at least one product.");
        return;
      }

      google.script.run.withSuccessHandler(response => {
        // Show success message
        document.getElementById("successMessage").style.display = "block";

        // Clear all input fields
        document.getElementById("invoiceDate").value = "";
        document.getElementById("contact").value = "";
        document.getElementById("invoiceNumber").value = "";
        document.getElementById("description").value = "";

        // Remove all product rows
        document.querySelector("#productTable tbody").innerHTML = "";

        // Reset Grand Total
        document.getElementById("grandTotal").innerText = "Grand Total: $0.00";

        // Clear Invoice Type selection
        document.getElementById("selectedType").innerText = "None";
        selectedInvoiceType = "";

        // Hide success message after 3 seconds
        setTimeout(() => {
          document.getElementById("successMessage").style.display = "none";
        }, 3000);

      }).saveInvoice({ invoiceInfo, products });
    }

    function printInvoice() {
      window.print();
    }
  </script>
  <style>
    body { font-family: Arial, sans-serif; }
    .invoice-container { display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 20px; }
    .product-table-container { margin-top: 20px; }
    table { width: 100%; border-collapse: collapse; }
    th, td { border: 1px solid black; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    .total-section { text-align: right; font-size: 18px; font-weight: bold; margin-top: 10px; }
    .success-notice {
      background-color: #28a745;
      color: white;
      padding: 10px;
      text-align: center;
      font-size: 16px;
      font-weight: bold;
      border-radius: 5px;
      margin-top: 10px;
      display: none;
    }
    .invoice-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 10px 15px;
      margin: 5px;
      cursor: pointer;
      font-size: 16px;
      border-radius: 5px;
    }
    .invoice-btn:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>
  <h2>Invoice Type</h2>
  <button class="invoice-btn" onclick="setInvoiceType('Purchase')">üì• Purchase</button>
  <button class="invoice-btn" onclick="setInvoiceType('Sale')">üì§ Sale</button>
  <p><strong>Selected Type:</strong> <span id="selectedType">None</span></p>

  <h2>Invoice Entry</h2>
  <div id="invoiceSection" class="invoice-container">
    <label>Date:</label>
    <input type="date" id="invoiceDate">
    <label>Contact:</label>
    <select id="contact"><option value="">Select Contact</option></select>
    <label>Invoice #:</label>
    <input type="text" id="invoiceNumber" placeholder="Enter Invoice No.">
    <label>Description:</label>
    <input type="text" id="description" placeholder="Enter Description">
  </div>

  <div id="successMessage" class="success-notice">‚úÖ Invoice Saved Successfully!</div>

  <button onclick="addProductRow()">‚ûï Add Product</button>
  <button onclick="saveInvoice()">üíæ Save Invoice</button>
  <button onclick="printInvoice()">üñ®Ô∏è Print Invoice</button>

  <div class="product-table-container">
    <table id="productTable">
      <thead>
        <tr><th>Product</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>
      </thead>
      <tbody></tbody>
    </table>
    <div id="grandTotal" class="total-section">Grand Total: $0.00</div>
  </div>
</body>
</html>
