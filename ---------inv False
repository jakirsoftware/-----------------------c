function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .addMetaTag('viewport', 'width=device-width, initial-scale=1')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}


function getContacts() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Contact");
  var contacts = sheet.getRange("A2:A").getValues();
  return contacts.flat();  // Flatten array
}

function getProducts() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Product");
  var products = sheet.getRange("A2:B").getValues();
  return products;
}

function saveInvoice(invoiceData) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Invoices");
  var row = sheet.getLastRow() + 1;
  
  // Save Invoice Info
  sheet.getRange(row, 1).setValue(invoiceData.invoiceInfo.invoiceType);
  sheet.getRange(row, 2).setValue(invoiceData.invoiceInfo.date);
  sheet.getRange(row, 3).setValue(invoiceData.invoiceInfo.contact);
  sheet.getRange(row, 4).setValue(invoiceData.invoiceInfo.invoiceNumber);
  sheet.getRange(row, 5).setValue(invoiceData.invoiceInfo.description);
  
  // Save Products Data
  invoiceData.products.forEach((product, index) => {
    sheet.getRange(row, 6 + index).setValue(product.productName);
    sheet.getRange(row, 6 + invoiceData.products.length + index).setValue(product.price);
    sheet.getRange(row, 6 + (invoiceData.products.length * 2) + index).setValue(product.quantity);
    sheet.getRange(row, 6 + (invoiceData.products.length * 3) + index).setValue(product.total);
  });

  // Save Discount Info
  sheet.getRange(row, 6 + (invoiceData.products.length * 4)).setValue(invoiceData.discount.type);
  sheet.getRange(row, 7 + (invoiceData.products.length * 4)).setValue(invoiceData.discount.value);
}
------------------------------------
<!DOCTYPE html>
<html>
<head>
  <style>
    .hidden { display: none; }
    .btn { margin: 5px; padding: 10px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }
    .btn:hover { background-color: #45a049; }
    table { width: 100%; margin-top: 20px; border-collapse: collapse; }
    table, th, td { border: 1px solid black; padding: 10px; }
  </style>
</head>
<body>
  <h2>Create Invoice</h2>
  
  <label>Invoice Type:</label>
  <button class="btn" onclick="setInvoiceType('Purchase')">Purchase</button>
  <button class="btn" onclick="setInvoiceType('Sale')">Sale</button>
  <br><br>
  
  <label>Date:</label>
  <input type="date" id="invoiceDate">
  <br><br>
  
  <label>Contact:</label>
  <select id="contact">
    <option value="">Select Contact</option>
  </select>
  <br><br>
  
  <label>Invoice Number:</label>
  <input type="text" id="invoiceNumber" placeholder="Enter Invoice Number">
  <br><br>
  
  <label>Description:</label>
  <input type="text" id="description" placeholder="Enter Description">
  <br><br>
  
  <label>Discount Type:</label>
  <button class="btn" onclick="setDiscountType('Fixed')">Fixed</button>
  <button class="btn" onclick="setDiscountType('Percent')">Percent</button>
  <br><br>
  
  <label for="discountValue">Discount Value:</label>
  <input type="number" id="discountValue" placeholder="Enter discount value" />
  <br><br>
  
  <h4>Products</h4>
  <table id="productTable">
    <thead>
      <tr>
        <th>Product</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Total</th>
        <th>Remove</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
  
  <button class="btn" onclick="addProductRow()">Add Product</button>
  <br><br>
  
  <div id="grandTotal">Grand Total: $0.00</div>
  
  <br><br>
  
  <button class="btn" onclick="saveInvoice()">Submit Invoice</button>
  <br><br>
  
  <div id="successMessage" class="hidden">
    <p>Invoice Submitted Successfully!</p>
  </div>
  
  <br>
  
  <button class="btn" onclick="printInvoice()">Print Invoice</button>

  <script>
    let selectedInvoiceType = "";
    let discountType = "Fixed"; // Default discount type
    let discountValue = 0; // Default discount value
    let productData = []; // Store product data once on page load

    window.onload = function() {
      document.getElementById("invoiceDate").value = new Date().toISOString().split('T')[0]; // Set default date to today's date

      // Fetch contacts from the 'Contact' sheet
      google.script.run.withSuccessHandler(function(contacts) {
        const contactSelect = document.getElementById("contact");
        contacts.forEach(contact => {
          let option = document.createElement("option");
          option.value = contact;
          option.textContent = contact;
          contactSelect.appendChild(option);
        });
      }).getContacts();

      // Fetch products from the 'Product' sheet
      google.script.run.withSuccessHandler(function(products) {
        productData = products; // Store product data in memory
        const productSelects = document.querySelectorAll(".product-select");
        productSelects.forEach(select => {
          products.forEach(product => {
            let option = document.createElement("option");
            option.value = product[0];  // Product Name
            option.textContent = product[0];  // Product Name
            select.appendChild(option);
          });
        });
      }).getProducts();
    }

    // Set Invoice Type (Purchase or Sale)
    function setInvoiceType(type) {
      selectedInvoiceType = type;
      document.getElementById("selectedType").innerText = type;
    }

    // Calculate the total amount after applying the discount
    function calculateTotal() {
      let rows = document.querySelectorAll("#productTable tbody tr");
      let grandTotal = 0;

      rows.forEach(row => {
        let price = parseFloat(row.querySelector(".price").value) || 0;
        let quantity = parseFloat(row.querySelector(".quantity").value) || 0;
        let total = price * quantity;

        row.querySelector(".total").value = total.toFixed(2);
        grandTotal += total;
      });

      // Apply Discount
      if (discountType === "Percent") {
        grandTotal -= (grandTotal * discountValue / 100);
      } else if (discountType === "Fixed") {
        grandTotal -= discountValue;
      }

      // Ensure grand total doesn't go negative
      grandTotal = grandTotal < 0 ? 0 : grandTotal;

      document.getElementById("grandTotal").innerText = "Grand Total: $" + grandTotal.toFixed(2);
    }

    // Add a new product row to the invoice
    function addProductRow() {
      let tableBody = document.querySelector("#productTable tbody");
      let newRow = document.createElement("tr");

      newRow.innerHTML = `
        <td><select class="product-select" onchange="updatePrice(this)">
          <option value="">Select Product</option>
        </select></td>
        <td><input type="number" class="price" placeholder="Price" readonly></td>
        <td><input type="number" class="quantity" placeholder="Quantity" oninput="calculateTotal()"></td>
        <td><input type="text" class="total" placeholder="Total" readonly></td>
        <td><button onclick="removeRow(this)">‚ùå</button></td>
      `;

      tableBody.appendChild(newRow);

      // Re-populate product options in the new row
      let productSelect = newRow.querySelector(".product-select");
      productData.forEach(product => {
        let option = document.createElement("option");
        option.value = product[0];  // Product Name
        option.textContent = product[0];  // Product Name
        productSelect.appendChild(option);
      });
    }

    // Remove a product row from the invoice
    function removeRow(button) {
      button.parentElement.parentElement.remove();
      calculateTotal();
    }

    // Update the product price when a product is selected
    function updatePrice(select) {
      let productName = select.value;
      let row = select.closest('tr');
      let priceInput = row.querySelector(".price");

      // Find product price from the loaded productData
      let product = productData.find(p => p[0] === productName);
      if (product) {
        priceInput.value = product[1];  // Set the price in the price input field
      }

      calculateTotal();
    }

    // Save the invoice details to the backend
    function saveInvoice() {
      if (!selectedInvoiceType) {
        alert("Please select an Invoice Type (Purchase or Sale).");
        return;
      }

      let invoiceInfo = {
        invoiceType: selectedInvoiceType,
        date: document.getElementById("invoiceDate").value,
        contact: document.getElementById("contact").value,
        invoiceNumber: document.getElementById("invoiceNumber").value,
        description: document.getElementById("description").value
      };

      let products = [];
      let rows = document.querySelectorAll("#productTable tbody tr");

      rows.forEach(row => {
        let productName = row.querySelector(".product-select").value;
        let price = parseFloat(row.querySelector(".price").value) || 0;
        let quantity = parseFloat(row.querySelector(".quantity").value) || 0;
        let total = parseFloat(row.querySelector(".total").value) || 0;

        if (productName && quantity > 0) {
          products.push({ productName, price, quantity, total });
        }
      });

      if (!invoiceInfo.date || !invoiceInfo.invoiceNumber || products.length === 0) {
        alert("Please fill invoice details and add at least one product.");
        return;
      }

      let discount = {
        type: discountType,
        value: parseFloat(document.getElementById("discountValue").value) || 0
      };

      google.script.run.withSuccessHandler(response => {
        // Show success message
        document.getElementById("successMessage").style.display = "block";

        // Clear all input fields
        document.getElementById("invoiceDate").value = "";
        document.getElementById("contact").value = "";
        document.getElementById("invoiceNumber").value = "";
        document.getElementById("description").value = "";
        document.getElementById("discountValue").value = "";

        // Remove all product rows
        document.querySelector("#productTable tbody").innerHTML = "";

        // Reset Grand Total
        document.getElementById("grandTotal").innerText = "Grand Total: $0.00";

        // Clear Invoice Type selection
        document.getElementById("selectedType").innerText = "None";
        selectedInvoiceType = "";

        // Hide success message after 3 seconds
        setTimeout(() => {
          document.getElementById("successMessage").style.display = "none";
        }, 3000);

      }).saveInvoice({ invoiceInfo, products, discount });
    }

    // Print the invoice page
    function printInvoice() {
      window.print();
    }

    // Set Discount Type (Fixed or Percent)
    function setDiscountType(type) {
      discountType = type;
      document.getElementById("discountType").innerText = type;
      calculateTotal();
    }

    // Discount input change listener
    document.getElementById("discountValue").addEventListener('input', function() {
      discountValue = parseFloat(this.value) || 0; // Update the discount value
      calculateTotal(); // Recalculate the total
    });
  </script>
</body>
</html>
