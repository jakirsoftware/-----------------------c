function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .addMetaTag('viewport', 'width=device-width, initial-scale=1')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// Function to get unique values for search boxes (Columns D, F & I)
function getUniqueValues(column) {
  var sheet = SpreadsheetApp.openById('1ho4S4IXtpcPpVtj1k5phVHjdP-fWIbJG6-CKucOBlmo').getSheetByName("Sheet1");
  var data = sheet.getRange(column + "2:" + column).getValues().flat(); // Get all values in the specified column
  var uniqueValues = [...new Set(data.filter(String))]; // Remove empty values and duplicates
  return JSON.stringify(uniqueValues);
}

// Function to get filtered data based on search boxes and date range
function getData(searchQueryD, searchQueryF, searchQueryI, fromDate, toDate) {
  var sheet = SpreadsheetApp.openById('1ho4S4IXtpcPpVtj1k5phVHjdP-fWIbJG6-CKucOBlmo').getSheetByName("Sheet1");
  var data = sheet.getRange("A2:Q").getValues(); // Include column Q for sum calculation

  // Remove empty rows
  data = data.filter(row => row.some(cell => cell !== ""));

  // Convert input dates to JavaScript Date objects
  fromDate = fromDate ? new Date(fromDate) : null;
  toDate = toDate ? new Date(toDate) : null;

  // Filter data by search queries (Columns D, F & I) and date range (Column C)
  data = data.filter(row => {
    let cellDate = new Date(row[2]); // Column C (Index 2)
    let matchesSearchD = searchQueryD ? row[3].toString() === searchQueryD : true; // Column D (Index 3)
    let matchesSearchF = searchQueryF ? row[5].toString() === searchQueryF : true; // Column F (Index 5)
    let matchesSearchI = searchQueryI ? row[8].toString() === searchQueryI : true; // Column I (Index 8)
    let matchesDateRange = (!fromDate || cellDate >= fromDate) && (!toDate || cellDate <= toDate);
    
    return matchesSearchD && matchesSearchF && matchesSearchI && matchesDateRange;
  });

  // Add serial numbers (SL)
  data = data.map((row, index) => [index + 1, ...row]); // Insert SL column at index 0

  // Sum filtered Column Q (Index 17 after adding SL)
  var sumQ = data.reduce((total, row) => total + (parseFloat(row[17]) || 0), 0);

  return JSON.stringify({ data, sumQ });
}

// Function to edit a row in the sheet
function editRow(rowIndex, updatedData) {
  var sheet = SpreadsheetApp.openById('1ho4S4IXtpcPpVtj1k5phVHjdP-fWIbJG6-CKucOBlmo').getSheetByName("Sheet1");

  // Row index is zero-based; so we add 2 to account for header row and zero-based index
  var row = sheet.getRange(rowIndex + 2, 1, 1, updatedData.length);
  row.setValues([updatedData]);
  return "Row edited successfully!";
}

// Function to delete a row from the sheet
function deleteRow(rowIndex) {
  var sheet = SpreadsheetApp.openById('1ho4S4IXtpcPpVtj1k5phVHjdP-fWIbJG6-CKucOBlmo').getSheetByName("Sheet1");

  // Row index is zero-based; so we add 2 to account for header row and zero-based index
  sheet.deleteRow(rowIndex + 2);
  return "Row deleted successfully!";
}

// Function to add a new row to the Google Sheet
function addNewRowToSheet(newRowData) {
  var sheet = SpreadsheetApp.openById('1ho4S4IXtpcPpVtj1k5phVHjdP-fWIbJG6-CKucOBlmo').getSheetByName("Sheet1");
  sheet.appendRow(newRowData); // Add the row data to the sheet
}
--------------------------------------
<!DOCTYPE html>
<html>
<head>
  <title>Search & Filter Table with Auto SL</title>
  <script>
    // Load unique values for the search boxes (D, F, and I columns)
    function loadUniqueValues() {
      google.script.run.withSuccessHandler(function(values) {
        populateSearchBox("searchBoxD", values);
      }).getUniqueValues("D");

      google.script.run.withSuccessHandler(function(values) {
        populateSearchBox("searchBoxF", values);
      }).getUniqueValues("F");

      google.script.run.withSuccessHandler(function(values) {
        populateSearchBox("searchBoxI", values);
      }).getUniqueValues("I");
    }

    // Populate the search boxes with unique values
    function populateSearchBox(elementId, values) {
      let searchBox = document.getElementById(elementId);
      searchBox.innerHTML = "<option value=''>-- Select Value --</option>"; // Default option

      // Parse the returned JSON and populate the select box with options
      let uniqueValues = JSON.parse(values);

      uniqueValues.forEach(function(value) {
        let option = document.createElement("option");
        option.value = value;
        option.textContent = value;
        searchBox.appendChild(option);
      });
    }

    // Load data based on selected search filters
    function loadData() {
      let searchQueryD = document.getElementById("searchBoxD").value;
      let searchQueryF = document.getElementById("searchBoxF").value;
      let searchQueryI = document.getElementById("searchBoxI").value;
      let fromDate = document.getElementById("fromDate").value;
      let toDate = document.getElementById("toDate").value;

      google.script.run.withSuccessHandler(displayData).getData(searchQueryD, searchQueryF, searchQueryI, fromDate, toDate);
    }

    // Display the filtered data in the table with input fields
    function displayData(response) {
      let { data, sumQ } = JSON.parse(response);
      let table = document.getElementById("dataTable");
      let sumDisplay = document.getElementById("sumDisplay");

      // Clear previous data
      table.innerHTML = "";

      data.forEach((row, rowIndex) => {
        let tr = document.createElement("tr");

        // Adding SL (Serial Number)
        let slCell = document.createElement("td");
        slCell.textContent = rowIndex + 1;
        tr.appendChild(slCell);

        // Loop through row data and replace with input fields
        row.forEach((cell, index) => {
          if (index !== 0) { // Skip SL column
            let td = document.createElement("td");
            let input = document.createElement("input");
            input.value = cell;

            // Format Column C (Date) as date input
            if (index === 3 && cell) { // Column C (Date) is at index 3 (0-based index)
              let dateObj = new Date(cell);
              input.type = "date";
              input.value = dateObj.toISOString().split("T")[0]; // Format to "YYYY-MM-DD"
            } else {
              input.type = "text";
            }

            td.appendChild(input);
            tr.appendChild(td);
          }
        });

        // Add Edit and Delete buttons
        let actionTd = document.createElement("td");
        let saveButton = document.createElement("button");
        saveButton.textContent = "Save";
        saveButton.onclick = function() { saveRow(rowIndex, tr); };

        let deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.onclick = function() { deleteRow(rowIndex); };

        actionTd.appendChild(saveButton);
        actionTd.appendChild(deleteButton);
        tr.appendChild(actionTd);

        table.appendChild(tr);
      });

      // Display filtered sum
      sumDisplay.innerText = "Total: " + sumQ.toFixed(2);
    }

    // Save edited row
    function saveRow(rowIndex, rowElement) {
      let inputs = rowElement.getElementsByTagName('input');
      let updatedData = [];
      
      // Collect updated data from input fields
      for (let i = 0; i < inputs.length; i++) {
        updatedData.push(inputs[i].value);
      }

      google.script.run.editRow(rowIndex, updatedData);
      showNotice("Row saved successfully!", "success");
      loadData();  // Reload the table to reflect changes
    }

    // Delete row function
    function deleteRow(rowIndex) {
      if (confirm("Are you sure you want to delete this row?")) {
        google.script.run.deleteRow(rowIndex);
        showNotice("Row deleted successfully!", "error");
        loadData();  // Reload the table to reflect changes
      }
    }

    // Show notice function with inner color
    function showNotice(message, type) {
      let notice = document.createElement("div");
      notice.classList.add("notice");

      if (type === "success") {
        notice.style.backgroundColor = "#4CAF50"; // Green for success
      } else if (type === "error") {
        notice.style.backgroundColor = "#f44336"; // Red for error
      }

      notice.style.color = "white";
      notice.style.padding = "15px";
      notice.style.marginTop = "20px";
      notice.style.borderRadius = "5px";
      notice.style.fontWeight = "bold";

      notice.textContent = message;
      document.body.appendChild(notice);

      // Remove the notice after 3 seconds
      setTimeout(() => {
        notice.remove();
      }, 3000);
    }

    // Print full page
    function printFullPage() {
      let printWindow = window.open('', '', 'width=800,height=600');

      printWindow.document.write('<html><head><title>Print Table</title>');
      printWindow.document.write('<style>');
      printWindow.document.write(`
        @media print {
          table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
          }
          th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
          }
          th {
            background-color: #f2f2f2;
          }
          .filter-container, .total-print-container {
            display: flex;
            gap: 10px;
            font-size: 16px;
            margin-bottom: 10px;
          }
          .page-break {
            page-break-before: always;
          }
        }
      `);
      printWindow.document.write('</style>');
      printWindow.document.write('</head><body>');
      printWindow.document.write('<h2>Filtered Data Table</h2>');

      // Print Filter Section
      printWindow.document.write(document.getElementById("filterSection").outerHTML);

      // Print Table
      printWindow.document.write(document.getElementById("printArea").outerHTML);

      printWindow.document.write('</body></html>');

      printWindow.document.close();
      printWindow.print();
    }

    // Initialize the page
    window.onload = () => {
      loadUniqueValues(); // Load unique values in dropdowns
    };
  </script>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .filter-container {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }
    .filter-container label {
      font-weight: bold;
    }
    .filter-container select, .filter-container input {
      padding: 5px;
    }
    .filter-container button {
      padding: 8px 12px;
      background-color: #28a745;
      color: white;
      border: none;
      cursor: pointer;
    }
    .filter-container button:hover {
      background-color: #218838;
    }
    .total-print-container {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-left: auto;
    }
    .total-print-container p {
      font-size: 16px;
      font-weight: bold;
      margin: 0;
    }
    .print-btn {
      background-color: #007bff;
    }
    .print-btn:hover {
      background-color: #0056b3;
    }
    .actions button {
      margin: 0 5px;
      background-color: #007bff;
      color: white;
      padding: 5px 10px;
      border: none;
      cursor: pointer;
    }
    .actions button.delete {
      background-color: red;
    }
    .actions button:hover {
      background-color: #0056b3;
    }

    /* Notice styling */
    .notice {
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      width: 100%;
      font-size: 16px;
      margin-bottom: 10px;
      border-radius: 5px;
      padding: 15px;
      color: white;
    }
  </style>
</head>
<body>
  <h2>Search & Filter Table with Auto SL</h2>

  <div id="filterSection">
    <div class="filter-container">
      <label for="searchBoxD">Search D:</label>
      <select id="searchBoxD"></select>

      <label for="searchBoxF">Search F:</label>
      <select id="searchBoxF"></select>

      <label for="searchBoxI">Search I:</label>
      <select id="searchBoxI"></select>

      <label for="fromDate">From:</label>
      <input type="date" id="fromDate" />
    
      <label for="toDate">To:</label>
      <input type="date" id="toDate" />
    
      <button onclick="loadData()">🔍 Search</button>

      <div class="total-print-container">
        <p id="sumDisplay">Total: 0</p>
        <button class="print-btn" onclick="printFullPage()">🖨️ Print</button>
      </div>
    </div>
  </div>

  <div id="printArea">
    <table border="1" id="dataTable"></table>
  </div>
</body>
</html>
