<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Order System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
            margin: 20px;
        }
        .container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        }
        .product-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        .product {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
            border-radius: 5px;
            background-color: #fff;
        }
        .product img {
            max-width: 100px;
            height: auto;
        }
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #fff;
        }
        .cart-item input {
            width: 50px;
            text-align: center;
        }
        .cart-btn {
            cursor: pointer;
            background: none;
            border: none;
            font-size: 18px;
        }
        .total {
            font-weight: bold;
            font-size: 1.2em;
            margin-top: 10px;
        }
        .submit-btn {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #28a745;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 1em;
            margin-top: 10px;
        }
        .message {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            font-size: 1.1em;
            display: none;
        }
        .success {
            background-color: #28a745;
            color: white;
        }
        .error {
            background-color: #dc3545;
            color: white;
        }
        .table-warning {
            color: red;
            font-size: 0.9em;
            display: none;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Product Order System</h1>
        
        <input type="text" id="searchBox" placeholder="Search products..." onkeyup="searchProducts()">
        <div id="productList"></div>

        <h2>Shopping Cart</h2>
        <div id="cartList"></div>
        <div id="totalAmount" class="total">Total: $0.00</div>

        <label for="tableNumber">Table Number:</label>
        <input type="text" id="tableNumber" placeholder="Enter Table Number" oninput="clearWarning()">
        <div id="tableWarning" class="table-warning">‚ö† Please enter your table number.</div>

        <button class="submit-btn" onclick="submitOrder()">Submit Order</button>

        <div id="invoiceNumber"></div>
        <div id="messageContainer" class="message"></div>
    </div>

    <script>
        let products = [];
        let cart = [];

        function fetchProducts() {
            google.script.run.withSuccessHandler(displayProducts).getProducts();
        }

        function displayProducts(data) {
            products = data;
            renderProductList(data);
        }

        function renderProductList(data) {
            let productList = document.getElementById("productList");
            productList.innerHTML = '<div class="product-container">';
            
            data.forEach((product, index) => {
                productList.innerHTML += `
                    <div class="product">
                        <img src="${product.image}" alt="${product.name}"><br>
                        <strong>${product.name}</strong><br>
                        $${product.price.toFixed(2)}<br>
                        <button onclick="addToCart(${index})">Add to Cart</button>
                    </div>
                `;
            });

            productList.innerHTML += '</div>';
        }

        function searchProducts() {
            let searchTerm = document.getElementById("searchBox").value.toLowerCase();
            let filteredProducts = products.filter(p => p.name.toLowerCase().includes(searchTerm));
            renderProductList(filteredProducts);
        }

        function addToCart(index) {
            let product = products[index];
            let cartItem = cart.find(item => item.name === product.name);

            if (cartItem) {
                cartItem.quantity++;
            } else {
                cart.push({ ...product, quantity: 1 });
            }
            updateCart();
        }

        function updateCart() {
            let cartList = document.getElementById("cartList");
            let totalAmount = 0;
            cartList.innerHTML = "";

            cart.forEach((item, index) => {
                let itemTotal = item.price * item.quantity;
                totalAmount += itemTotal;

                cartList.innerHTML += `
                    <div class="cart-item">
                        <span>${item.name} - $${itemTotal.toFixed(2)}</span>
                        <button class="cart-btn" onclick="decreaseQuantity(${index})">‚àí</button>
                        <input type="number" value="${item.quantity}" min="1" onchange="editQuantity(${index}, this.value)">
                        <button class="cart-btn" onclick="increaseQuantity(${index})">+</button>
                        <button class="cart-btn" onclick="removeFromCart(${index})">‚ùå</button>
                    </div>
                `;
            });

            document.getElementById("totalAmount").innerText = `Total: $${totalAmount.toFixed(2)}`;
        }

        function increaseQuantity(index) {
            cart[index].quantity++;
            updateCart();
        }

        function decreaseQuantity(index) {
            if (cart[index].quantity > 1) {
                cart[index].quantity--;
            } else {
                cart.splice(index, 1);
            }
            updateCart();
        }

        function editQuantity(index, newQuantity) {
            let qty = parseInt(newQuantity);
            if (qty > 0) {
                cart[index].quantity = qty;
            } else {
                cart.splice(index, 1);
            }
            updateCart();
        }

        function removeFromCart(index) {
            cart.splice(index, 1);
            updateCart();
        }

        function clearWarning() {
            document.getElementById("tableWarning").style.display = "none";
        }

        function submitOrder() {
            let tableNumber = document.getElementById("tableNumber").value;
            if (!tableNumber.trim()) {
                document.getElementById("tableWarning").style.display = "block";
                return;
            }

            if (cart.length === 0) {
                showMessage("‚ö† Your cart is empty!", "error");
                return;
            }

            let invoiceNumber = `INV-${Date.now()}`;
            let orderData = cart.map(item => ({
                productName: item.name,
                price: item.price,
                quantity: item.quantity,
                tableNumber: tableNumber,
                invoice: invoiceNumber
            }));

            google.script.run.withSuccessHandler(response => {
                cart = [];
                updateCart();
                document.getElementById("tableNumber").value = "";
                document.getElementById("invoiceNumber").innerHTML = 
                    `‚úÖ Order placed! Invoice: <strong>${invoiceNumber}</strong><br>
                    <a href="${response.pdfUrl}" target="_blank">üìÑ View Invoice PDF</a>`;
                showMessage("Order submitted successfully!", "success");
            }).saveOrder(orderData);
        }

        function showMessage(text, type) {
            let messageDiv = document.getElementById("messageContainer");
            messageDiv.innerText = text;
            messageDiv.className = `message ${type}`;
            messageDiv.style.display = "block";
            setTimeout(() => { messageDiv.style.display = "none"; }, 3000);
        }

        window.onload = fetchProducts;
    </script>

</body>
</html>
-------------------------------------
//https://chatgpt.com/c/67ac0640-dbe0-8008-9c9c-241a9a50736e
//https://chatgpt.com/c/67ad4fc1-2410-8008-a152-2a2907767e25
//openById('1Bfq89wi90O6w_RFLquFLXtyrD8YUXAQZroc0Cv5FxJU')
//1FaX7GR7c4g-kb_V6caYsv1Upc5_wUmFa
function doGet() {
  return HtmlService.createTemplateFromFile('index').evaluate().setTitle("Cart")
    .addMetaTag('viewport', 'width=device-width, initial-scale=1')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// Fetch products from "Products" sheet
function getProducts() {
  const sheet = SpreadsheetApp.openById('1Bfq89wi90O6w_RFLquFLXtyrD8YUXAQZroc0Cv5FxJU').getSheetByName("Products");
  const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 3).getValues();
  let products = [];

  data.forEach(row => {
    if (row[0]) {
      products.push({
        name: row[0],
        image: row[1],
        price: parseFloat(row[2])
      });
    }
  });

  return products;
}

// Save order to "Orders" sheet
function saveOrder(orderData) {
  const ss = SpreadsheetApp.openById('1Bfq89wi90O6w_RFLquFLXtyrD8YUXAQZroc0Cv5FxJU');
  const sheet = ss.getSheetByName("Orders");
  const controlSheet = ss.getSheetByName("Control");
  const folderId = "1FaX7GR7c4g-kb_V6caYsv1Upc5_wUmFa"; // Change to your Drive folder ID
  const folder = DriveApp.getFolderById(folderId);
  
  // Generate unique invoice number based on timestamp
  const invoiceNumber = "INV-" + new Date().getTime();
  const tableNumber = orderData[0].tableNumber;
  
  // Fetch headlines from Control sheet
  const headline1 = controlSheet.getRange("A2").getValue();
  const headline2 = controlSheet.getRange("B2").getValue();
  const headline3 = controlSheet.getRange("C2").getValue();
  
  // Generate PDF and get the link
  const pdfUrl = generateInvoicePDF(invoiceNumber, tableNumber, orderData, headline1, headline2, headline3, folder);
  
  // Save order data in the Orders sheet
  orderData.forEach(order => {
    sheet.appendRow([
      new Date(),              // Timestamp
      invoiceNumber,           // Invoice Number
      tableNumber,             // Table Number
      order.productName,       // Product Name
      order.price,             // Price
      order.quantity,          // Quantity
      order.price * order.quantity, // Total Price
      pdfUrl                   // PDF Link
    ]);
  });

  return { success: true, invoice: invoiceNumber, pdfUrl };
}

function generateInvoicePDF(invoiceNumber, tableNumber, orderItems, headline1, headline2, headline3, folder) {
  const fileName = "Invoice_" + invoiceNumber + ".pdf";
  const pdfContent = createPOSPDFContent(invoiceNumber, tableNumber, orderItems, headline1, headline2, headline3);
  const blob = Utilities.newBlob(pdfContent, "application/pdf", fileName);
  const file = folder.createFile(blob);
  return file.getUrl();
}

function createPOSPDFContent(invoiceNumber, tableNumber, orderItems, headline1, headline2, headline3) {
  let total = 0;
  let content = `
    <div style="width: 58mm; font-size: 12px; font-family: monospace; text-align: center;">
      <h2>${headline1}</h2>
      <h3>${headline2}</h3>
      <h4>${headline3}</h4>
      <p>Invoice: <strong>${invoiceNumber}</strong></p>
      <p>Name or number: <strong>${tableNumber}</strong></p>
      <hr>
      <table style="width: 100%; font-size: 10px; border-collapse: collapse;">
        <tr>
          <th style="text-align: left;">Item</th>
          <th>Qty</th>
          <th>Price</th>
          <th>Total</th>
        </tr>`;

  orderItems.forEach(item => {
    let itemTotal = item.quantity * item.price;
    total += itemTotal;
    content += `
        <tr>
          <td>${item.productName}</td>
          <td>${item.quantity}</td>
          <td>${item.price.toFixed(2)} Tk.</td>
          <td>${itemTotal.toFixed(2)} Tk.</td>
        </tr>`;
  });

  content += `
        <tr>
          <td colspan="3"><strong>Grand Total</strong></td>
          <td><strong>${total.toFixed(2)} Tk.</strong></td>
        </tr>
      </table>
      <hr>
      <p>Thank you for your order!</p>
    </div>`;

  return content;
}
